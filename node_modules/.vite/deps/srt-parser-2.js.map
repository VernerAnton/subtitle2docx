{"version":3,"file":"srt-parser-2.js","names":[],"sources":["../../srt-parser-2/dist/index.js"],"sourcesContent":["class Parser {\n    seperator = \",\";\n    timestampToSeconds(srtTimestamp) {\n        const [rest, millisecondsString] = srtTimestamp.split(\",\");\n        const milliseconds = parseInt(millisecondsString);\n        const [hours, minutes, seconds] = rest.split(\":\").map((x) => parseInt(x));\n        const result = milliseconds * 0.001 + seconds + 60 * minutes + 3600 * hours;\n        // fix odd JS roundings, e.g. timestamp '00:01:20,460' result is 80.46000000000001\n        return Math.round(result * 1000) / 1000;\n    }\n    ;\n    correctFormat(time) {\n        // Fix the format if the format is wrong\n        // 00:00:28.9670 Become 00:00:28,967\n        // 00:00:28.967  Become 00:00:28,967\n        // 00:00:28.96   Become 00:00:28,960\n        // 00:00:28.9    Become 00:00:28,900\n        // 00:00:28,96   Become 00:00:28,960\n        // 00:00:28,9    Become 00:00:28,900\n        // 00:00:28,0    Become 00:00:28,000\n        // 00:00:28,01   Become 00:00:28,010\n        // 0:00:10,500   Become 00:00:10,500\n        let str = time.replace(\".\", \",\");\n        var hour = null;\n        var minute = null;\n        var second = null;\n        var millisecond = null;\n        // Handle millisecond\n        var [front, ms] = str.split(\",\");\n        millisecond = this.fixed_str_digit(3, ms);\n        // Handle hour\n        var [a_hour, a_minute, a_second] = front.split(\":\");\n        hour = this.fixed_str_digit(2, a_hour, false);\n        minute = this.fixed_str_digit(2, a_minute, false);\n        second = this.fixed_str_digit(2, a_second, false);\n        return `${hour}:${minute}:${second},${millisecond}`;\n    }\n    /*\n    // make sure string is 'how_many_digit' long\n    // if str is shorter than how_many_digit, pad with 0\n    // if str is longer than how_many_digit, slice from the beginning\n    // Example:\n  \n    Input: fixed_str_digit(3, '100')\n    Output: 100\n    Explain: unchanged, because \"100\" is 3 digit\n  \n    Input: fixed_str_digit(3, '50')\n    Output: 500\n    Explain: pad end with 0\n  \n    Input: fixed_str_digit(3, '50', false)\n    Output: 050\n    Explain: pad start with 0\n  \n    Input: fixed_str_digit(3, '7771')\n    Output: 777\n    Explain: slice from beginning\n    */\n    fixed_str_digit(how_many_digit, str, padEnd = true) {\n        if (str.length == how_many_digit) {\n            return str;\n        }\n        if (str.length > how_many_digit) {\n            return str.slice(0, how_many_digit);\n        }\n        if (str.length < how_many_digit) {\n            if (padEnd) {\n                return str.padEnd(how_many_digit, \"0\");\n            }\n            else {\n                return str.padStart(how_many_digit, \"0\");\n            }\n        }\n    }\n    tryComma(data) {\n        data = data.replace(/\\r/g, \"\");\n        var regex = /(\\d+)\\n(\\d{1,2}:\\d{2}:\\d{2},\\d{1,3}) --> (\\d{1,2}:\\d{2}:\\d{2},\\d{1,3})/g;\n        let data_array = data.split(regex);\n        data_array.shift(); // remove first '' in array\n        return data_array;\n    }\n    tryDot(data) {\n        data = data.replace(/\\r/g, \"\");\n        var regex = /(\\d+)\\n(\\d{1,2}:\\d{2}:\\d{2}\\.\\d{1,3}) --> (\\d{1,2}:\\d{2}:\\d{2}\\.\\d{1,3})/g;\n        let data_array = data.split(regex);\n        data_array.shift(); // remove first '' in array\n        this.seperator = \".\";\n        return data_array;\n    }\n    fromSrt(data) {\n        var originalData = data;\n        var data_array = this.tryComma(originalData);\n        if (data_array.length == 0) {\n            data_array = this.tryDot(originalData);\n        }\n        var items = [];\n        for (var i = 0; i < data_array.length; i += 4) {\n            const startTime = this.correctFormat(data_array[i + 1].trim());\n            const endTime = this.correctFormat(data_array[i + 2].trim());\n            var new_line = {\n                id: data_array[i].trim(),\n                startTime,\n                startSeconds: this.timestampToSeconds(startTime),\n                endTime,\n                endSeconds: this.timestampToSeconds(endTime),\n                text: data_array[i + 3].trim(),\n            };\n            items.push(new_line);\n        }\n        return items;\n    }\n    toSrt(data) {\n        var res = \"\";\n        const end_of_line = \"\\r\\n\";\n        for (var i = 0; i < data.length; i++) {\n            var s = data[i];\n            res += s.id + end_of_line;\n            res += s.startTime + \" --> \" + s.endTime + end_of_line;\n            res += s.text.replace(\"\\n\", end_of_line) + end_of_line + end_of_line;\n        }\n        return res;\n    }\n}\nexport default Parser;\n"],"mappings":";AAAA,IAAM,SAAN,MAAa;CACT,YAAY;CACZ,mBAAmB,cAAc;EAC7B,MAAM,CAAC,MAAM,sBAAsB,aAAa,MAAM,IAAI;EAC1D,MAAM,eAAe,SAAS,mBAAmB;EACjD,MAAM,CAAC,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,CAAC,KAAK,MAAM,SAAS,EAAE,CAAC;EACzE,MAAM,SAAS,eAAe,OAAQ,UAAU,KAAK,UAAU,OAAO;AAEtE,SAAO,KAAK,MAAM,SAAS,IAAK,GAAG;;CAGvC,cAAc,MAAM;EAWhB,IAAI,MAAM,KAAK,QAAQ,KAAK,IAAI;EAChC,IAAI,OAAO;EACX,IAAI,SAAS;EACb,IAAI,SAAS;EACb,IAAI,cAAc;EAElB,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM,IAAI;AAChC,gBAAc,KAAK,gBAAgB,GAAG,GAAG;EAEzC,IAAI,CAAC,QAAQ,UAAU,YAAY,MAAM,MAAM,IAAI;AACnD,SAAO,KAAK,gBAAgB,GAAG,QAAQ,MAAM;AAC7C,WAAS,KAAK,gBAAgB,GAAG,UAAU,MAAM;AACjD,WAAS,KAAK,gBAAgB,GAAG,UAAU,MAAM;AACjD,SAAO,GAAG,KAAK,GAAG,OAAO,GAAG,OAAO,GAAG;;CAwB1C,gBAAgB,gBAAgB,KAAK,SAAS,MAAM;AAChD,MAAI,IAAI,UAAU,eACd,QAAO;AAEX,MAAI,IAAI,SAAS,eACb,QAAO,IAAI,MAAM,GAAG,eAAe;AAEvC,MAAI,IAAI,SAAS,eACb,KAAI,OACA,QAAO,IAAI,OAAO,gBAAgB,IAAI;MAGtC,QAAO,IAAI,SAAS,gBAAgB,IAAI;;CAIpD,SAAS,MAAM;AACX,SAAO,KAAK,QAAQ,OAAO,GAAG;EAE9B,IAAI,aAAa,KAAK,MADV,0EACsB;AAClC,aAAW,OAAO;AAClB,SAAO;;CAEX,OAAO,MAAM;AACT,SAAO,KAAK,QAAQ,OAAO,GAAG;EAE9B,IAAI,aAAa,KAAK,MADV,4EACsB;AAClC,aAAW,OAAO;AAClB,OAAK,YAAY;AACjB,SAAO;;CAEX,QAAQ,MAAM;EACV,IAAI,eAAe;EACnB,IAAI,aAAa,KAAK,SAAS,aAAa;AAC5C,MAAI,WAAW,UAAU,EACrB,cAAa,KAAK,OAAO,aAAa;EAE1C,IAAI,QAAQ,EAAE;AACd,OAAK,IAAI,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAAG;GAC3C,MAAM,YAAY,KAAK,cAAc,WAAW,IAAI,GAAG,MAAM,CAAC;GAC9D,MAAM,UAAU,KAAK,cAAc,WAAW,IAAI,GAAG,MAAM,CAAC;GAC5D,IAAI,WAAW;IACX,IAAI,WAAW,GAAG,MAAM;IACxB;IACA,cAAc,KAAK,mBAAmB,UAAU;IAChD;IACA,YAAY,KAAK,mBAAmB,QAAQ;IAC5C,MAAM,WAAW,IAAI,GAAG,MAAM;IACjC;AACD,SAAM,KAAK,SAAS;;AAExB,SAAO;;CAEX,MAAM,MAAM;EACR,IAAI,MAAM;EACV,MAAM,cAAc;AACpB,OAAK,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;GAClC,IAAI,IAAI,KAAK;AACb,UAAO,EAAE,KAAK;AACd,UAAO,EAAE,YAAY,UAAU,EAAE,UAAU;AAC3C,UAAO,EAAE,KAAK,QAAQ,MAAM,YAAY,GAAG,cAAc;;AAE7D,SAAO;;;AAGf,mBAAe"}